AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Push module demostrating sending realtime data to client over wss

  SAM Template that has the DynamoDB table and Lambda functions 
  needed to demonstrate the Websocket protocol on API Gateway
  and processing messages on an SQS queue with Lambda

Parameters:
  TableName:
    Type: String
    Default: 'push_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  QueueName:
    Type: String
    Default: 'push_queue'
    Description: The name of the new SQS queue 

Resources:
  #API AUTHORIZER
  PushAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: PushLambdaAuthorizer
      ApiId: !Ref PushWebSocket
      AuthorizerType: REQUEST
      AuthorizerCredentialsArn: !GetAtt PushAuthorizerRole.Arn
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations 
      IdentitySource:
        - route.request.header.Authorization

  #ROLE for authorizer
  PushAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub PushLambdaAuthorizer-Role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  #API GATEWAY
  PushWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub PushWebSocket-${AWS::StackName}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PushWebSocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PushAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PushWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref PushWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref PushWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref PushWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: DEV
      Description: DEV Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref PushWebSocket
  
  #DYNAMODB
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
        - AttributeName: 'userId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      TableName: !Sub ${TableName}-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
          - IndexName: 'userGSI'
            KeySchema:
                - AttributeName: 'userId'
                  KeyType: 'HASH'
            Projection:
                ProjectionType: 'ALL'  
  #LAMBDA
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs8.10
      Environment:
        Variables:
          COGNITO_USERPOOLID: eu-west-1_xxxxxxxxxx #NOTE: set your cognito userpool id
          COGNITO_APPCLIENT: 1t1a1sqj2u33itbquxxxxxxx #NOTE: set your appclient for cognito which was used for getting JWD ID Token
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PushWebSocket
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PushWebSocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendToUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendToUser/
      Handler: app.handler
      MemorySize: 128
      Timeout: 10
      Runtime: nodejs8.10
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PushSqsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'
  PushSqsQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: !Ref QueueName
      ReceiveMessageWaitTimeSeconds : 20 #(0-20) Let's save some money, so set to max #Note: There is a initial burst of 5 concurrent function invocations (https://docs.aws.amazon.com/lambda/latest/dg/scaling.html)
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PushDLQSqsQueue.Arn 
        maxReceiveCount : 10 
  PushDLQSqsQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: !Sub '${QueueName}-DLQ'
      MessageRetentionPeriod: 1209600 # = Max - 14 days (default is 345600 - 4 days)
 
Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendToUserFunctionArn:
    Description: "SendToUser function ARN"
    Value: !GetAtt SendToUserFunction.Arn

  PushSqsQueueName:
    Description: "Push queue name"
    Value: !Ref PushSqsQueue

  PushSqsQueueArn:
    Description: "Push Queue  ARN"
    Value: !GetAtt PushSqsQueue.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref PushWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
